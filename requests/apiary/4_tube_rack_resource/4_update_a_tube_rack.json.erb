<%
require 'json'
h={:header => [], :response_header => [] }
h[:description]=<<EOD
**Update a tube rack.**
All aliquots in each tube of the tube rack will be updated with 
`aliquot_type` and `aliquot_quantity`.

* `aliquot_type`
* `aliquot_quantity` volume (ul) if liquid, mass (mg) if solid
* `tubes` new tubes to add to the tube rack. The specified locations need to be empty.
EOD
h[:method] = "PUT"
h[:url]='/11111111-2222-3333-4444-777777777777'
h[:header] << 'Accept: application/json'
h[:setup]=<<EOD
sample1 = Lims::LaboratoryApp::Laboratory::Sample.new(:name => 'sample 1')
sample2 = Lims::LaboratoryApp::Laboratory::Sample.new(:name => 'sample 2')
source_tube1 = Lims::LaboratoryApp::Laboratory::Tube.new << Lims::LaboratoryApp::Laboratory::Aliquot.new(:quantity => 5, :type => "NA", :sample => sample1)
source_tube2 = Lims::LaboratoryApp::Laboratory::Tube.new << Lims::LaboratoryApp::Laboratory::Aliquot.new(:quantity => 5, :type => "NA", :sample => sample2)
tube_rack = Lims::LaboratoryApp::Laboratory::TubeRack.new(:number_of_columns => 12, :number_of_rows => 8)
tube_rack["A1"] = source_tube1
tube_rack["E5"] = source_tube2
new_sample1 = Lims::LaboratoryApp::Laboratory::Sample.new(:name => 'new sample 1')
new_tube1 = Lims::LaboratoryApp::Laboratory::Tube.new << Lims::LaboratoryApp::Laboratory::Aliquot.new(:quantity => 5, :type => "NA", :sample => new_sample1)
new_sample2 = Lims::LaboratoryApp::Laboratory::Sample.new(:name => 'new sample 2')
new_tube2 = Lims::LaboratoryApp::Laboratory::Tube.new << Lims::LaboratoryApp::Laboratory::Aliquot.new(:quantity => 5, :type => "NA", :sample => new_sample2)

save_with_uuid({
  sample1 => [1,2,3,0,0], sample2 => [1,2,3,0,1], 
  source_tube1 => [1,2,3,4,5], source_tube2 => [1,2,3,4,6], tube_rack => [1,2,3,4,7],
  new_sample1 => [1,2,4,5,1], new_sample2 => [1,2,4,5,2],
  new_tube1 => [1,2,4,5,3], new_tube2 => [1,2,4,5,4]
})
EOD
h[:parameters]=<<EOP
{
  "aliquot_type": "DNA",
  "aliquot_quantity": 10,
  "tubes": {
    "C2":"11111111-2222-4444-5555-333333333333", 
    "G10":"11111111-2222-4444-5555-444444444444"
  }
}
EOP
h[:status]=200
h[:response_header] << 'Content-Type: application/json'
h[:response]=<<EOD
{ "tube_rack": {
    "actions": {
        "create": "/11111111-2222-3333-4444-777777777777",
        "read": "/11111111-2222-3333-4444-777777777777",
        "update": "/11111111-2222-3333-4444-777777777777",
        "delete": "/11111111-2222-3333-4444-777777777777"
    },
    "uuid": "11111111-2222-3333-4444-777777777777",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "tubes": {
        "A1": {
            "actions": {
                "create": "/11111111-2222-3333-4444-555555555555",
                "read": "/11111111-2222-3333-4444-555555555555",
                "update": "/11111111-2222-3333-4444-555555555555",
                "delete": "/11111111-2222-3333-4444-555555555555"
            },
            "uuid": "11111111-2222-3333-4444-555555555555",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-000000000000",
                            "create": "/11111111-2222-3333-0000-000000000000",
                            "update": "/11111111-2222-3333-0000-000000000000",
                            "delete": "/11111111-2222-3333-0000-000000000000"
                        },
                        "uuid": "11111111-2222-3333-0000-000000000000",
                        "name": "sample 1"
                    },
                    "quantity": 10,
                    "type": "DNA",
                    "unit": "mole",
                    "out_of_bounds": {}
                }
            ]
        },
        "C2": {
            "actions": {
                "create": "/11111111-2222-4444-5555-333333333333",
                "read": "/11111111-2222-4444-5555-333333333333",
                "update": "/11111111-2222-4444-5555-333333333333",
                "delete": "/11111111-2222-4444-5555-333333333333"
            },
            "uuid": "11111111-2222-4444-5555-333333333333",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-4444-5555-111111111111",
                            "create": "/11111111-2222-4444-5555-111111111111",
                            "update": "/11111111-2222-4444-5555-111111111111",
                            "delete": "/11111111-2222-4444-5555-111111111111"
                        },
                        "uuid": "11111111-2222-4444-5555-111111111111",
                        "name": "new sample 1"
                    },
                    "quantity": 10,
                    "type": "DNA",
                    "unit": "mole",
                    "out_of_bounds": {}
                }
            ]
        },
        "E5": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-3333-0000-111111111111",
                            "create": "/11111111-2222-3333-0000-111111111111",
                            "update": "/11111111-2222-3333-0000-111111111111",
                            "delete": "/11111111-2222-3333-0000-111111111111"
                        },
                        "uuid": "11111111-2222-3333-0000-111111111111",
                        "name": "sample 2"
                    },
                    "quantity": 10,
                    "type": "DNA",
                    "unit": "mole",
                    "out_of_bounds": {}
                }
            ]
        },
        "G10": {
            "actions": {
                "read": "/11111111-2222-4444-5555-444444444444",
                "create": "/11111111-2222-4444-5555-444444444444",
                "update": "/11111111-2222-4444-5555-444444444444",
                "delete": "/11111111-2222-4444-5555-444444444444"
            },
            "uuid": "11111111-2222-4444-5555-444444444444",
            "type": null,
            "max_volume": null,
            "aliquots": [
                {
                    "sample": {
                        "actions": {
                            "read": "/11111111-2222-4444-5555-222222222222",
                            "create": "/11111111-2222-4444-5555-222222222222",
                            "update": "/11111111-2222-4444-5555-222222222222",
                            "delete": "/11111111-2222-4444-5555-222222222222"
                        },
                        "uuid": "11111111-2222-4444-5555-222222222222",
                        "name": "new sample 2"
                    },
                    "quantity": 10,
                    "type": "DNA",
                    "unit": "mole",
                    "out_of_bounds": {}
                }
            ]
        }
    }
}}
EOD
%>
<%= h.to_json %>
